labs(y = "Cases (per 100,000) \n", x = "")  +
scale_y_continuous(labels = comma_format()) +
theme(text = element_text(size = 10, color = "black"))
pd %>%
ggplot(aes(x = as.factor(order), y = covid.cases, group = shelter)) +
theme(legend.title = element_text(hjust = 0.8),
plot.title = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_violin(scale = "count", color = davys) +
geom_jitter(height = 1, shape  = 20, size = 1, color = sapphire) +
labs(y = "Cases (per 100,000) \n", x = "")  +
scale_y_continuous(labels = comma_format()) +
theme(text = element_text(size = 10, color = "black"))
pd %>%
ggplot(aes(x = as.factor(order), y = covid.cases, group = shelter)) +
theme(legend.title = element_text(hjust = 0.8),
plot.title = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_violin(scale = "count", color = davys) +
geom_jitter(height = 1, width = 0.25, shape  = 20, size = 1, color = sapphire) +
labs(y = "Cases (per 100,000) \n", x = "")  +
scale_y_continuous(labels = comma_format()) +
theme(text = element_text(size = 10, color = "black"))
d %>%
ggplot(aes(covid.cases, group = shelter)) +
theme(legend.title = element_text(hjust = 0.8),
plot.title = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_density() +
labs(y = "Cases (per 100,000) \n", x = "")  +
theme(text = element_text(size = 10, color = "black"))
pd %>%
ggplot(aes(covid.cases, group = shelter)) +
theme(legend.title = element_text(hjust = 0.8),
plot.title = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_density() +
labs(y = "Cases (per 100,000) \n", x = "")  +
theme(text = element_text(size = 10, color = "black"))
pd %>%
ggplot(aes(covid.cases, color = shelter)) +
theme(legend.title = element_text(hjust = 0.8),
plot.title = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_density() +
labs(y = "Cases (per 100,000) \n", x = "")  +
theme(text = element_text(size = 10, color = "black"))
pd %>%
ggplot(aes(covid.cases, color = as.factor(shelter))) +
theme(legend.title = element_text(hjust = 0.8),
plot.title = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_density() +
labs(y = "Cases (per 100,000) \n", x = "")  +
theme(text = element_text(size = 10, color = "black"))
pd %>%
ggplot(aes(covid.cases)) +
theme(legend.title = element_text(hjust = 0.8),
plot.title = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_density() +
labs(y = "Cases (per 100,000) \n", x = "")  +
theme(text = element_text(size = 10, color = "black"))
View(pd)
pd %>%
ggplot(aes(cases.pop)) +
theme(legend.title = element_text(hjust = 0.8),
plot.title = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_density() +
labs(y = "Cases (per 100,000) \n", x = "")  +
theme(text = element_text(size = 10, color = "black"))
pd %>%
ggplot(aes(x = as.factor(order), y = cases.pop, group = shelter)) +
theme(legend.title = element_text(hjust = 0.8),
plot.title = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_violin(scale = "count", color = davys) +
geom_jitter(height = 1, width = 0.25, shape  = 20, size = 1, color = sapphire) +
labs(y = "Cases (per 100,000) \n", x = "")  +
scale_y_continuous(labels = comma_format()) +
theme(text = element_text(size = 10, color = "black"))
pd %>%
ggplot(aes(x = order, y = cases.pop, group = shelter)) +
theme(legend.title = element_text(hjust = 0.8),
plot.title = element_text(size = 10)) +
theme_classic2() +
geom_boxplot(outlier.shape = NA, fill = "white", color = davys) +
stat_boxplot(geom = "errorbar", color = davys) +
geom_jitter(width = .3, shape  = 20, size = 1, color = sapphire) +
labs(y = "Cases (per 100,000) \n", x = "")  +
scale_y_continuous(labels = comma_format()) +
theme(text = element_text(size = 10, color = "black"))
pd %>%
ggplot(aes(x = as.factor(order), y = cases.pop, group = shelter)) +
theme(legend.title = element_text(hjust = 0.8),
plot.title = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_violin(scale = "count", color = davys) +
geom_jitter(height = 1, width = 0.25, shape  = 20, size = 1, color = sapphire) +
labs(y = "Cases (per 100,000) \n", x = "")  +
scale_y_continuous(labels = comma_format()) +
theme(text = element_text(size = 10, color = "black"))
pd %>%
ggplot(aes(log(cases.pop))) +
theme(legend.title = element_text(hjust = 0.8),
plot.title = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
geom_density() +
labs(y = "Cases (per 100,000) \n", x = "")  +
theme(text = element_text(size = 10, color = "black"))
pd %>%
ggplot(aes(log(cases.pop))) +
theme(legend.title = element_text(hjust = 0.8),
plot.title = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
stat_ecdf() +
labs(y = "Cases (per 100,000) \n", x = "")  +
theme(text = element_text(size = 10, color = "black"))
library(XML)
doc <- readHTMLTable(
doc="https://en.wikipedia.org/wiki/List_of_United_States_presidential_elections_by_popular_vote_margin")
library(httr)
url <- "https://en.wikipedia.org/wiki/List_of_United_States_presidential_elections_by_popular_vote_margin"
r <- GET(url)
View(r)
doc <- readHTMLTable(
doc=content(r, "text"))
View(doc)
df <- read_excel("~/Data/presidential elections.xlsx")
library(readxl)
df <- read_excel("~/Data/presidential elections.xlsx")
View(df)
df <- read_excel("~/Data/presidential elections.xlsx") %>%
mutate(election_year = year(election_year))
View(df)
View(df)
df %>%
df %>%
ggplot(aes(x = election_year, y = pvm_percent)) +
theme(legend.title = element_text(hjust = 0.8),
plot.title = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
scale_y_continuous(position = "right", labels = percent_format())
df %>%
ggplot(aes(x = election_year, y = pvm_percent)) +
theme(legend.title = element_text(hjust = 0.8),
plot.title = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
scale_y_continuous(position = "right", labels = percent_format())
df %>%
ggplot(aes(x = election_year, y = pvm_percent)) +
geom_line() +
theme(legend.title = element_text(hjust = 0.8),
plot.title = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
scale_y_continuous(position = "right", labels = percent_format())
df %>%
df %>%
ggplot(aes(x = election_year, y = pvm_percent)) +
geom_bar(stat = "identity",
position = 'dodge') +
theme(legend.title = element_text(hjust = 0.8),
plot.title = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
scale_y_continuous(position = "right", labels = percent_format())
df %>%
ggplot(aes(x = election_year, y = pvm_percent)) +
geom_bar(stat = "identity",
position = 'dodge') +
theme(legend.title = element_text(hjust = 0.8),
plot.title = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
scale_y_continuous(position = "right", labels = percent_format())
df %>%
ggplot(aes(x = election_year, y = pvm_percent)) +
geom_bar(stat = "identity",
position = 'dodge') +
theme(legend.title = element_text(hjust = 0.8),
plot.title = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
scale_y_continuous(position = "right", labels = percent_format()) +
labs(x = "Election year", y = "Margin of victory")
df %>%
ggplot(aes(x = election_year, y = pvm_percent)) +
geom_bar(stat = "identity",
position = 'dodge') +
theme(legend.title = element_text(hjust = 0.8),
plot.title = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
scale_y_continuous(position = "right", labels = percent_format()) +
labs(x = "Election year", y = "Margin of victory \n")
df %>%
filter(election_year > 1950)
df %>%
filter(election_year > 1950) %>%
ggplot(aes(x = election_year, y = pvm_percent)) +
geom_bar(stat = "identity",
position = 'dodge') +
theme(legend.title = element_text(hjust = 0.8),
plot.title = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
scale_y_continuous(position = "right", labels = percent_format()) +
labs(x = "Election year", y = "Margin of victory \n")
df %>%
filter(election_year > 1950) %>%
ggplot(aes(x = election_year, y = pvm_percent)) +
geom_bar(stat = "identity",
position = 'dodge') +
theme(legend.title = element_text(hjust = 0.8),
plot.title = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
scale_y_continuous(position = "right", labels = percent_format()) +
labs(x = "\n Election year", y = "Margin of victory \n")
df %>%
filter(election_year > 1900) %>%
ggplot(aes(x = election_year, y = pvm_percent)) +
geom_bar(stat = "identity",
position = 'dodge') +
theme(legend.title = element_text(hjust = 0.8),
plot.title = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
scale_y_continuous(position = "right", labels = percent_format()) +
labs(x = "\n Election year", y = "Margin of victory \n")
df %>%
filter(election_year > 1900) %>%
ggplot(aes(x = election_year, y = pvm_percent)) +
geom_bar(stat = "identity",
position = 'dodge',
fill = sapphire) +
theme(legend.title = element_text(hjust = 0.8),
plot.title = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
scale_y_continuous(position = "right", labels = percent_format()) +
labs(x = "\n Election year", y = "Margin of victory \n")
df %>%
filter(election_year > 1900) %>%
ggplot(aes(x = election_year, y = pvm_percent)) +
geom_bar(stat = "identity",
position = "dodge",
fill = davys) +
theme(legend.title = element_text(hjust = 0.8),
plot.title = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
scale_y_continuous(position = "right", labels = percent_format()) +
labs(x = "\n Election year", y = "Margin of victory \n")
df %>%
filter(election_year > 1900) %>%
ggplot(aes(x = election_year, y = pvm_percent)) +
geom_bar(stat = "identity",
position = "dodge",
fill = davys) +
theme(legend.title = element_text(hjust = 0.8),
plot.title = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(family = "Segoe UI", size = 10, color = "black")) +
scale_y_continuous(position = "right", labels = percent_format()) +
labs(x = "\n Election year", y = "Margin of victory \n")
df %>%
filter(election_year > 1900) %>%
ggplot(aes(x = election_year, y = pvm)) +
geom_bar(stat = "identity",
position = "dodge",
fill = davys) +
theme(legend.title = element_text(hjust = 0.8),
plot.title = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
text = element_text(family = "Segoe UI", size = 10, color = "black")) +
scale_y_continuous(position = "right", labels = comma_format()) +
labs(x = "\n Election year", y = "Margin of victory \n")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages("rattle")
library(rattle)
data <- segmentationOriginal
inTrain <- data$Case == "Train"
trainData <- data[inTrain,]
testData <- data[!inTrain,]
cartModel <- train(Class ~ ., data = trainData, method = "rpart")
cartModel$finalModel
fancyRpartPlot(cartModel$finalModel)
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
treeModel <- train(Area ~ ., data=olive, method="rpart2")
treeModel
newdata <- as.data.frame(t(colMeans(olive)))
predict(treeModel, newdata)
data(SAheart)
library(ElemStatLearn)
data(SAheart)
load("C:/Users/ageis/Documents/Data/ElemStatLearn/data/vowel.train.RData")
load("C:/Users/ageis/Documents/Data/ElemStatLearn/data/vowel.test.RData")
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
# fit rf predictor relating the factor variable y
fitRf <- train(y ~ ., data=vowel.train, method = "rf")
# fit rf predictor relating the factor variable y
fitRf <- train(y ~ ., data=vowel.train, method = "rf")
fitGBM <- train(y ~ ., data=vowel.train, method = "gbm")
predRf <- predict(fitRf, vowel.test)
predGBM <- predict(fitGBM, vowel.test)
# RF Accuracy:
confusionMatrix(predRf, vowel.test$y)$overall[1]
# GBM Accuracy:
confusionMatrix(predGBM,  vowel.test$y)$overall[1]
pred <- data.frame(predRf, predGBM, y = vowel.test$y, agree=predRf == predGBM)
accuracy <- sum(predRf[pred$agree] == pred$y[pred$agree]) / sum(pred$agree)
accuracy
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
#Set the seed to 62433 and predict diagnosis with
#all the other variables using a random forest ("rf"), boosted trees ("gbm")
#and linear discriminant analysis ("lda") model.
#Stack the predictions together using random forests ("rf").
#What is the resulting accuracy on the test set?
#Is it better or worse than each of the individual predictions?
set.seed(62433)
fitRf <- train(diagnosis ~ ., data = training, method = "rf")
fitGBM <- train(diagnosis ~ ., data = training, method = "gbm")
fitLDA <- train(diagnosis ~ ., data = training, method = "lda")
predRf <- predict(fitRf, testing)
predGBM <- predict(fitGBM, testing)
predLDA <- predict(fitLDA, testing)
pred <- data.frame(predRf, predGBM, predLDA, diagnosis=testing$diagnosis)
# Stack the predictions together using random forests ("rf")
fit <- train(diagnosis ~., data = pred, method = "rf")
predFit <- predict(fit, testing)
c1 <- confusionMatrix(predRf,  testing$diagnosis)$overall[1]
c2 <- confusionMatrix(predGBM,  testing$diagnosis)$overall[1]
c3 <- confusionMatrix(predLDA, testing$diagnosis)$overall[1]
c4 <- confusionMatrix(predFit, testing$diagnosis)$overall[1]
print(paste(c1, c2, c3, c4))
set.seed(3523)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
fit <- train(CompressiveStrength ~ ., data=training, method = "lasso")
library(elasticnet)
fit <- train(CompressiveStrength ~ ., data=training, method = "lasso")
plot.enet(fit$finalModel, xvar = "penalty", use.color = T)
# 5
dat = read.csv("~/Downloads/gaData.csv")
# 5
dat = read.csv("C:/Users/ageis/Downloads/Downloads/gaData.csv")
# 5
dat = read.csv("C:/Users/ageis/Downloads/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
fit <- bats(tstrain)
fit
yhat <- forecast(fit, level = 95, h = dim(testing)[1])
names(data.frame(yhat))
predComb <- cbind(testing, data.frame(yhat))
names(testing)
names(predComb)
predComb$in95 <- (predComb$Lo.95 < predComb$visitsTumblr) & (predComb$visitsTumblr < predComb$Hi.95)
prop.table(table(predComb$in95))[2]
View(testing)
autoplot(forecast(yhat, h = 235))
View(predComb)
predComb %>%
geom_point(aes(x = date, y = visitsTumblr, color = "Actual"), size = 0.8) +
geom_line(aes(y = Point.Forecast, color = "BATS"), size = 0.5) +
geom_ribbon(aes(ymin = lo.95, ymax = hi.95, fill = "95% Confidence interval"), alpha = 0.1) +
scale_color_manual("", values = c("Actual" = prussian, "BATS" = prussian,
"95% Confidence interval" = violet)) +
theme(panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom",
text = element_text(family = "Segoe UI"),
plot.title = element_text(face = "bold", size = rel(1.5)),
plot.caption = element_text(hjust = 1, size = 9)) +
scale_x_date(date_labels = "%B-%Y")
predComb %>%
ggplot(aes(x = date)) +
geom_point(aes(y = visitsTumblr, color = "Actual"), size = 0.8) +
geom_line(aes(y = Point.Forecast, color = "BATS"), size = 0.5) +
geom_ribbon(aes(ymin = lo.95, ymax = hi.95, fill = "95% Confidence interval"), alpha = 0.1) +
scale_color_manual("", values = c("Actual" = prussian, "BATS" = prussian,
"95% Confidence interval" = violet)) +
theme(panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom",
text = element_text(family = "Segoe UI"),
plot.title = element_text(face = "bold", size = rel(1.5)),
plot.caption = element_text(hjust = 1, size = 9)) +
scale_x_date(date_labels = "%B-%Y")
predComb %>%
ggplot(aes(x = date)) +
geom_point(aes(y = visitsTumblr, color = "Actual"), size = 0.8) +
geom_line(aes(y = Point.Forecast, color = "BATS"), size = 0.5) +
geom_ribbon(aes(ymin = Lo.95, ymax = Hi.95, fill = "95% Confidence interval"), alpha = 0.1) +
scale_color_manual("", values = c("Actual" = prussian, "BATS" = prussian,
"95% Confidence interval" = violet)) +
theme(panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom",
text = element_text(family = "Segoe UI"),
plot.title = element_text(face = "bold", size = rel(1.5)),
plot.caption = element_text(hjust = 1, size = 9)) +
scale_x_date(date_labels = "%B-%Y")
predComb %>%
mutate(date = ymd(date)) %>%
ggplot(aes(x = date)) +
geom_point(aes(y = visitsTumblr, color = "Actual"), size = 0.8) +
geom_line(aes(y = Point.Forecast, color = "BATS"), size = 0.5) +
geom_ribbon(aes(ymin = Lo.95, ymax = Hi.95, fill = "95% Confidence interval"), alpha = 0.1) +
scale_color_manual("", values = c("Actual" = prussian, "BATS" = prussian,
"95% Confidence interval" = violet)) +
theme(panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom",
text = element_text(family = "Segoe UI"),
plot.title = element_text(face = "bold", size = rel(1.5)),
plot.caption = element_text(hjust = 1, size = 9)) +
scale_x_date(date_labels = "%B-%Y")
predComb %>%
mutate(date = ymd(date)) %>%
ggplot(aes(x = date)) +
geom_point(aes(y = visitsTumblr, color = "Actual"), size = 0.8) +
geom_line(aes(y = Point.Forecast, color = "BATS"), size = 0.5) +
geom_ribbon(aes(ymin = Lo.95, ymax = Hi.95, fill = "95% Confidence interval"), alpha = 0.1) +
scale_color_manual("", values = c("Actual" = prussian, "BATS" = burgundy,
"95% Confidence interval" = violet)) +
theme(panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom",
text = element_text(family = "Segoe UI"),
plot.title = element_text(face = "bold", size = rel(1.5)),
plot.caption = element_text(hjust = 1, size = 9)) +
scale_x_date(date_labels = "%B-%Y")
predComb %>%
mutate(date = ymd(date)) %>%
ggplot(aes(x = date)) +
geom_point(aes(y = visitsTumblr, color = "Actual"), size = 0.8) +
geom_line(aes(y = Point.Forecast, color = "BATS"), size = 0.5) +
geom_ribbon(aes(ymin = Hi.95, ymax = Lo.95, fill = "95% Confidence interval"), alpha = 0.1) +
scale_color_manual("", values = c("Actual" = prussian, "BATS" = burgundy,
"95% Confidence interval" = violet)) +
theme(panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank(),
legend.title = element_blank(),
legend.position = "bottom",
text = element_text(family = "Segoe UI"),
plot.title = element_text(face = "bold", size = rel(1.5)),
plot.caption = element_text(hjust = 1, size = 9)) +
scale_x_date(date_labels = "%B-%Y")
set.seed(3523)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
install.packages("e1071")
library(e1071)
set.seed(325)
fit <- svm(CompressiveStrength ~., data = training)
pred <- predict(fit, testing)
acc <- accuracy(pred, testing$CompressiveStrength)
acc
install.packages(c("data.table", "farver", "gifski", "ipred", "isoband", "lubridate", "MatrixModels", "plm", "ps", "RcppParallel", "svglite", "tibble", "tidyr", "tinytex"))
install.packages(c("data.table", "farver", "gifski", "ipred", "isoband", "lubridate", "MatrixModels", "plm", "ps", "RcppParallel", "svglite", "tibble", "tidyr", "tinytex"))
install.packages(c("data.table", "farver", "gifski", "ipred", "isoband", "lubridate", "ps", "RcppParallel", "svglite", "tibble"))
loadedNamespaces()
unloadNamespace(loadedNamespaces())
loadedNamespaces()
install.packages(c("data.table", "farver", "gifski", "ipred", "isoband", "lubridate", "ps", "RcppParallel", "svglite", "tibble"))
